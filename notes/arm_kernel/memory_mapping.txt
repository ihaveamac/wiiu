
The following struct is used internally to describe "raw" ARM mappings before
written to the page/translation table:

typedef struct {
    u32 paddr;
    u32 vaddr;
    u32 size;                  // (in bytes).
    u32 domain;                // < 0xF.
    u32 domain_access_control; // Permission bits.
    int is_cached;
} map_desc_t;


Related functions:
    08125B6C int kernel::PageTable::MapDescriptor(map_desc_t* desc)
    08125B6C int kernel::PageTable::MapDescriptorForce(map_desc_t* desc)


These functions are in turn used in a few different places. The kernel startup
thread seems to map a region "SharedUserExecution":
    VA: 0x08135000 PA: 0x08135000 Size: 0x1000 Domain=0 Perm=RWR- Cached

This area contains a small stub used by the StartThread syscall. I think LR
will point to this function, so that returning to LR will jump here and
terminate the thread.


Then later, a function called by the kernel startup thread:
    VA: 0x08144000 PA: 0x08144000 Size: 0xC000 Domain=0 Perm=RWR- Cached


General mappings are done via the main map function:
    08122BF0 int kernel::mmu::Map(u32 paddr, u32 vaddr, u32 size, u32 domain,
                                  int fg_unk, int fg_unk2, u32 flags)

The flags are:
    0x40             : Map in FG (IOMMU?).
    0x20             : Map in ARM9.
    0x10             : Privileged RW, usermode --.
    0x08             : Privileged RW, usermode R-.
    Not 0x10 or 0x08 : Privileged RW, usermode RW.
    0x02             : Not cached.


_iosMemMapInit performs the following ARM9 maps on boot:
    (SRAM) VA: 0xFFFF0000 PA: 0xFFFF0000 Size:    0x10000 Domain=0 Perm=RW--
    (MEM0) VA: 0x08120000 PA: 0x08120000 Size:    0xA0000 Domain=0 Perm=RW--
    (MEM2) VA: 0x1D000000 PA: 0x1D000000 Size:  0x2B00000 Domain=0 Perm=RWRW
    (MEM2) VA: 0x1FB00000 PA: 0x1FB00000 Size:   0x300000 Domain=0 Perm=RWRW
    (MEM0) VA: 0x08000000 PA: 0x08000000 Size:   0x100000 Domain=F Perm=RWRW
    (MEM0) VA: 0x08100000 PA: 0x08100000 Size:    0x20000 Domain=0 Perm=RWRW
    (MEM1) VA: 0x00000000 PA: 0x00000000 Size:     0x1000 Domain=0 Perm=RW--
    (MEM1) VA: 0x00001000 PA: 0x00001000 Size:  0x1FFF000 Domain=0 Perm=RWRW
    (MEM2) VA: 0x14000000 PA: 0x14000000 Size:  0x9000000 Domain=0 Perm=RWRW
    (MEM2) VA: 0x28000000 PA: 0x28000000 Size: 0xA8000000 Domain=0 Perm=RWRW


It also does a few "hardware maps". Each descriptor in the kernel looks like
this:

typedef struct {
    u32 mem_id;
    u32 devices?;    // Seen: 1,4,8,16, 0x14,0x20=ppc?,0x40,0x80,0xEB,0xC2=default_ppc_devices?,0xF7
    u32 desc_type;   // 1=allow_range?, 2=block_range?, 3=override_with_entire_range
    u32 unk3;        // Seen: 0
    u32 region_mask; // Bit0: range0, bit1: range1
    u32 range0_start;
    u32 range0_end;
    u32 range1_start;
    u32 range1_end;
} hw_memdesc;
